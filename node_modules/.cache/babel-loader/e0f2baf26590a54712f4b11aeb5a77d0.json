{"ast":null,"code":"import _slicedToArray from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: []\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this$props = this.props,\n          nrows = _this$props.nrows,\n          ncols = _this$props.ncols,\n          chanceLightStartsOn = _this$props.chanceLightStartsOn;\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      while (board.length < nrows) {\n        var row = [];\n\n        for (var i = 0; i < ncols; i++) {\n          row.push(chanceLightStartsOn[Math.floor(Math.random() * chanceLightStartsOn.length)]);\n        }\n\n        board.push(row);\n      }\n\n      this.setState(_objectSpread({}, this.state, {\n        board: board\n      }));\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (\n        /*#__PURE__*/\n        // TODO\n        // make table board\n        React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: this.createBoard,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 9\n          }\n        }, \"click\"), /*#__PURE__*/React.createElement(\"table\", {\n          className: \"Board\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Cell, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }\n        })))))\n      ); // if the game is won, just show a winning msg & render nothing else\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 3,\n  chanceLightStartsOn: ['t', 'f']\n};\nexport default Board;","map":{"version":3,"sources":["/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","nrows","ncols","chanceLightStartsOn","length","row","i","push","Math","floor","random","setState","coord","split","map","Number","y","x","flipCell","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 3,\n    ncols: 3,\n    chanceLightStartsOn: ['t', 'f']\n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: [],\n    }\n    this.createBoard = this.createBoard.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let { nrows, ncols, chanceLightStartsOn } = this.props;\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    while (board.length < nrows) {\n      let row = [];\n      for (let i = 0; i < ncols; i++) {\n        row.push(chanceLightStartsOn[Math.floor(Math.random() * chanceLightStartsOn.length)])\n      }\n      board.push(row);\n    }\n    this.setState({...this.state, board: board})\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return (\n      // TODO\n\n      // make table board\n      <div>\n        <button onClick={this.createBoard}>click</button>\n        <table className='Board'>\n          <tbody>\n            <tr>\n              <Cell />\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}