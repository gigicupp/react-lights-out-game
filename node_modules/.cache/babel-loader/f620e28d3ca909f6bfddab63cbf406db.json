{"ast":null,"code":"import _slicedToArray from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this$props = this.props,\n          nrows = _this$props.nrows,\n          ncols = _this$props.ncols,\n          chanceLightStartsOn = _this$props.chanceLightStartsOn;\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      while (board.length < nrows) {\n        var row = [];\n\n        for (var i = 0; i < ncols; i++) {\n          row.push(chanceLightStartsOn < Math.random());\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          //if false, switch to true vice versa\n          board[y][x] = !board[y][x];\n        }\n      } //y = row and x = col\n\n\n      flipCell(y, x); //flip initial cell\n\n      var hasWon = false; // TODO: flip this cell and the cells around it\n\n      flipCell(y, x - 1); //flip the left\n\n      flipCell(y, x + 1); //flip the right\n\n      flipCell(y - 1, x); //flip the below\n\n      flipCell(y + 1, x); //flip the top\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var board = this.state.board;\n      var _this$props3 = this.props,\n          ncols = _this$props3.ncols,\n          nrows = _this$props3.nrows;\n      var tblBoard = [];\n\n      for (var rows = 0; rows < nrows; rows++) {\n        var row = [];\n\n        for (var columns = 0; columns < ncols; columns++) {\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            isLit: board[rows][columns],\n            key: \"\".concat(rows, \"-\").concat(columns),\n            coord: \"\".concat(rows, \"-\").concat(columns),\n            flipCellsAround: this.flipCellsAround,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 11\n            }\n          }));\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: rows,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return (\n        /*#__PURE__*/\n        // TODO\n        // make table board\n        React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"table\", {\n          className: \"Board\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }\n        }, tblBoard)))\n      ); // if the game is won, just show a winning msg & render nothing else\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/gfghjfigi141/Desktop/Practice/Udemy - Modern React Bootcamp (Hooks, Context, NextJS, Router)/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","flipCellsAround","nrows","ncols","chanceLightStartsOn","length","row","i","push","Math","random","coord","split","map","Number","y","x","flipCell","setState","tblBoard","rows","columns","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n    this.createBoard = this.createBoard.bind(this);\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let { nrows, ncols, chanceLightStartsOn } = this.props;\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    while (board.length < nrows) {\n      let row = [];\n      for (let i = 0; i < ncols; i++) {\n        row.push(chanceLightStartsOn < Math.random())\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        //if false, switch to true vice versa\n        board[y][x] = !board[y][x];\n      }\n    }\n  \n    //y = row and x = col\n    flipCell(y,x) //flip initial cell\n    let hasWon = false;\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x - 1); //flip the left\n    flipCell(y, x + 1); //flip the right\n    flipCell(y - 1, x); //flip the below\n    flipCell(y + 1, x); //flip the top\n    \n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let { board } = this.state;\n    let { ncols, nrows } = this.props;\n    let tblBoard = []; \n    for(let rows = 0; rows < nrows; rows ++) {\n      let row = [];\n      for(let columns = 0; columns < ncols; columns ++) {\n        row.push(\n          <Cell isLit={board[rows][columns]}\n            key={`${rows}-${columns}`}\n            coord={`${rows}-${columns}`}\n            flipCellsAround={this.flipCellsAround}\n          />\n        )\n      }\n      tblBoard.push(<tr key={rows}>{row}</tr>)\n    }\n\n    return (\n      // TODO\n\n      // make table board\n      <div>\n        <table className='Board'>\n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}